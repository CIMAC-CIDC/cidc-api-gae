language: "python"
python:
  - "3.6"
services:
  - postgresql
addons:
  postgresql: "9.6"
cache:
  directories:
    - $HOME/google-cloud-sdk/
env:
  global:
    - PYTHONPATH=$PYTHONPATH:$(pwd)/cidc_api
    - GOOGLE_APPLICATION_CREDENTIALS=$HOME/credentials.json
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1
  matrix:
    - DEPLOY=pypi
    - DEPLOY=gae
install:
  - pip install -r requirements.dev.txt
before_script:
  - psql -c "create user cidcdev with password '1234'"
  - psql -c "create database cidctest"
  - psql -c "grant all privileges on database cidctest to cidcdev"
  - psql cidctest -c "create extension citext"
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build
script:
  - pytest --cov=cidc_schemas -v
  - black --check cidc_api tests --target-version=py36
after_script:
  - coverage xml
  - ./cc-test-reporter after-build -t coverage.py --exit-code $TRAVIS_TEST_RESULT 

before_deploy:
  - if [ "$TRAVIS_BRANCH" = production ]; then
    echo "$GCLOUD_SERVICE_ACCOUNT_JSON_PROD" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS;
    else
    echo "$GCLOUD_SERVICE_ACCOUNT_JSON_STAGING" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS;
    fi
  - source .travis/install_gcloud.sh
deploy:
  - provider: script
    # we need `beta` for the `--no-cache` flag, which disables dependency caching
    script: gcloud beta app deploy app.staging.yaml --project cidc-dfci-staging --no-cache -v "travis-$TRAVIS_BRANCH-${TRAVIS_COMMIT:0:7}-$TRAVIS_BUILD_NUMBER"
    on:
      branch: master
      condition: $DEPLOY = gae
  - provider: script
    script: gcloud beta app deploy app.prod.yaml --project cidc-dfci --no-cache -v "travis-$TRAVIS_BRANCH-${TRAVIS_COMMIT:0:7}-$TRAVIS_BUILD_NUMBER"
    on:
      branch: production
      condition: $DEPLOY = gae
  # We deploy data model code to PyPI for use in, e.g., cidc-cloud-functions
  - provider: pypi
    username: jlurye-ksg
    password: $PYPI_PASSWORD
    skip_existing: true
    on:
      branch: master
      condition: $DEPLOY = pypi
